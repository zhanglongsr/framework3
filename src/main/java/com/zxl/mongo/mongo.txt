GridFS是用于存储和检索超过BSON文档16MB大小限制的文件的规范。


什么情况下应该使用GridFS
对于MongoDB collection下的文档而言，在文件大于16MB时，我们应该使用GridFS。
在一些解决方案中，使用MongoDB的GridFS存储大文件，比使用系统级别的文件系统更便利。
.当文件系统的目录对文件数量有限制时，你应该使用GridFS来存储需要的尽可能多的文件；
.当你想让你的文件和元数据在多个系统和设施之间自动同步和部署时。使用地理上分布的副本集(geographically distributed replica sets)，MongoDB可以自动地分发文件和元数据到多个mongo实例和设施上。
.当你想访问大文件的部分信息，而又不想把整个文件加载到内存时，你可以使用GridFS调回部分文件，而不用把整个文件读入到内存。

如果你需要自动的更新文件的整个内容，不要使用GridFS.作为替代，你可以存储文件的多个版本，并且在元数据中指定文件的当前版本。在上传新版本的文件后，你可以以原子更新来更新表示为"latest"的元数据字段，如果需要的话，你可以删除以前的版本。



副本集基本概念
副本集是mongod实例集群，实例之间相互复制并且自动故障转移。

副本集测试

--------------------------
Read Preferences(读优先权)

读优先级，主要为客户端程序提供对副本集节点读的控制。客户端应用程序可以选择以下几项来定义读优先级。
.PRIMARY
默认的读模式，只从 primary(活跃节点)读,如果primary节点无法到达，则抛出错误。
.PRIMARY PREFERRED
primary可获得，从primary读取，否则从secondary(备份节点)读取.
.SECONDARY
从secondary读取，否则出错。
.SECONDARY PREFERRED
secondary可获得，从secondary读取，否则从primary读取。
.NEAREST
从响应最快的节点中读取。
------------------------


关于journal
一个连续的二进制事务使用，使数据库在硬关机事件一致状态。MongoDB使日志默认为64位MongoDB版本2和较新的版本。日志文件预分配和将作为数据目录三1GB的文件存在。使日志文件较小，使用smallfiles。


-----------------------------
getLastError
这个命令返回当前连接最后一次操作的错误状态.默认情况下,mongoDB不提供响应来确认写操作的成功或者失败，通常，客户端联合使用写操作与getLastError命令，来确认写操作的成功性。

写操作
在MongoDB中，create或者modify都被认为是写操作
写操作以collection为目标，并且单一文档级别的写操作是原子性的(行写原子性)。也就是说，一个写操作，跨越多文档或者多collection，这个写操作是不具备原子性的。

WriteConcern(写有关、写关注)
写关注是发送到MongoDB部署的每个写操作的特性，并且描述了应用程序所关注的写操作结果的数量。采用弱写关注或者禁用写关注，应用程序能够发送写操作到MongoDB，并且应用程序能够继续执行而不需要等待响应。而采用强写关注，
则需要等待MongoDB的应答或者确认写操作成功，应用程序才能继续执行。MongoDB提供了不同级别的写关注，来处理应用程序不同的需求。
写关注类型
Errors Ignored
	忽略错误的写关注。网络错误、mongoDB的错误，会导致MongoDB处理失败，但写操作本身却不知道。因此此种类型存在显著的数据持久性风险。
Unacknowledged
------------------------------